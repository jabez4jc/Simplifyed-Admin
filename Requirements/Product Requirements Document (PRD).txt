Product Requirements Document (PRD)

Product: Simplifyed – Algo Trading Admin Dashboard

Version: v1.0

Owner: JeNeFa AdVenture

Date: 08-Sept-2025

⸻

1. Executive Summary

Simplifyed is an admin dashboard designed to manage and monitor multiple OpenAlgo instances via their API keys. The application provides a centralized interface for fund monitoring, PnL tracking, automated instance management (Live vs Analyzer mode), and server-side automation. It enables administrators to configure profit/loss thresholds, automate trade halts when targets are met, and maintain high availability through health checks.

The platform ensures robust monitoring, automation, and streamlined control over multi-user algorithmic trading environments.

⸻

2. Objectives
	•	Provide a single pane of glass for monitoring all onboarded OpenAlgo instances.
	•	Enable real-time(ish) fund balance and PnL tracking (20-second refresh).
	•	Automate profit/loss-driven mode switching (Live ↔ Analyzer).
	•	Ensure smooth transitions by automatically closing/cancelling trades before switching modes.
	•	Enable remote management of instances (onboarding, editing, deleting).
	•	Ensure server-side automation continues even if the client app is closed.
	•	Provide usability features: search, bulk actions, card/table view toggle.
	•	Maintain system resiliency via periodic health checks (20 minutes).

⸻

3. Target Users
	•	Admin Users: Owners/Operators of Simplifyed who need to oversee multiple OpenAlgo instances across strategies.
	•	Strategy Managers: Users managing multiple algo instances with specific strategy tags.
	•	Retail Traders (indirect): Benefit from safer automated monitoring (PnL limits, auto-halts).

⸻

4. Core Features

4.1 Instance Management (Admin Page)
	•	Add a new OpenAlgo instance with:
	•	Name
	•	Host URL
	•	Strategy Tag
	•	API Key
	•	Edit existing instance details (Host URL, API Key, Strategy Tag).
	•	Remove an instance.
	•	Search/filter instances by Name / Strategy Tag / Host URL.
	•	Instances stored securely in DB with encrypted API keys.

⸻

4.2 Dashboard
	•	Instance Listing
	•	Option to toggle between Card View and Table View.
	•	Each instance shows:
	•	Name, Host URL, Strategy Tag
	•	Current Fund Balance
	•	Current PnL (fetched every 20 seconds)
	•	Mode: Live / Analyzer (toggle switch)
	•	Health status (last ping)
	•	Bulk Actions
	•	Select multiple instances → Toggle Analyzer/Live mode.
	•	Bulk update target profit/loss thresholds.
	•	Search/Filter
	•	Search by Name, Host URL, Strategy Tag.
	•	Filter by Mode (Live/Analyzer).

⸻

4.3 Automation
	•	PnL Monitoring (Server-Side)
	•	Every instance checked every 20 seconds for PnL.
	•	Threshold-based automation:
	•	If Target Profit reached → Close positions & Cancel orders (via Strategy Tag) → Switch to Analyzer mode.
	•	If Max Loss reached → Same process → Switch to Analyzer mode.
	•	Logging of actions taken for audit trail.
	•	Health Checks
	•	Every 20 minutes, ping each instance’s host URL.
	•	If down → Mark instance as Unavailable and alert admin.
	•	Safe Mode Switching
	•	Before switching Live → Analyzer:
	•	Fetch all open positions.
	•	Close them.
	•	Cancel all pending orders.
	•	Confirm success before mode switch.

⸻

4.4 Threshold Management
	•	Configure Target Profit and Max Loss per instance.
	•	Bulk set thresholds for multiple selected instances.
	•	Update persists in DB and monitoring resumes with new config.

⸻

4.5 Server-Side Automation
	•	A background job/service runs independently of UI.
	•	Responsibilities:
	•	Monitor fund balance & PnL.
	•	Perform automatic mode switching.
	•	Execute health checks.
	•	Store logs for actions & errors.
	•	Admin UI is a control panel for configuring, but automation continues 24/7 server-side.

⸻

5. Extended Features (Future-Ready Enhancements)
	•	Notifications & Alerts
	•	Email / Telegram / Slack alerts when thresholds hit or instance down.
	•	Role-Based Access Control (RBAC)
	•	Multiple admins with restricted permissions.
	•	Historical PnL Tracking
	•	Store instance-wise daily PnL and render charts.
	•	Instance Grouping
	•	Group instances by strategy tag or custom group for bulk actions.
	•	Audit Logging
	•	Maintain logs of every action (manual + automated).
	•	API for 3rd Party Tools
	•	Expose Simplifyed’s monitoring data for external consumption.

⸻

6. Technical Requirements

6.1 Frontend
	•	Framework: React (with Tailwind + DaisyUI).
	•	Views:
	•	Dashboard (cards/table view, search, bulk actions).
	•	Admin Page (add/edit/remove instances).
	•	Real-time refresh via WebSockets or 20s polling.

6.2 Backend
	•	Language: Python (FastAPI or Flask).
	•	Database: SQLite (lightweight, per your preference).
	•	Task Scheduler: Celery / APScheduler for PnL checks & health pings.
	•	Secure storage of API keys (encrypted).
	•	Logging framework for automation actions.

6.3 Integrations
	•	OpenAlgo REST API (POST-only requests).
	•	Scheduler for periodic checks.
	•	Future: Alert integrations (Telegram/Slack).

⸻

7. Performance Requirements
	•	PnL checks must complete within <2s per instance.
	•	System should handle at least 200 concurrent OpenAlgo instances.
	•	Fail-safe retry if API call fails.
	•	Auto-recovery when instance becomes available again.

⸻

8. Risks & Mitigation
	•	API downtime → Mark as unavailable, retry after 5 min.
	•	Large instance count → Optimize via async requests.
	•	Improper switching to Analyzer mode → Strict validation: confirm closure of all positions & orders.
	•	Data security → Encrypt API keys, restrict access.

⸻

9. Success Metrics
	•	<2% failure rate in PnL checks.
	•	100% accurate switching when thresholds hit.
	•	<10s delay in reflecting profit/loss changes.
	•	99.9% uptime for monitoring service.